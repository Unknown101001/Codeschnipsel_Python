import numpy as np

def nan_helper(y):
    """Helper to handle indices and logical indices of NaNs.

    Input:
        - y, 1d numpy array with possible NaNs
    Output:
        - nans, logical indices of NaNs
        - index, a function, with signature indices= index(logical_indices),
          to convert logical indices of NaNs to 'equivalent' indices
    Example:
        >>> # linear interpolation of NaNs
        >>> nans, x= nan_helper(y)
        >>> y[nans]= np.interp(x(nans), x(~nans), y[~nans])
    """

    return np.isnan(y), lambda z: z.nonzero()[0]


def blink_correct(data):
    """ Interpolates between Fixations (all Saccades and Blinks)
    :param data: ndarray
    :return: data: ndarray
    """
    for c in data:
        if c[0] == c[1] == 0:
            c[0] = c[1] = np.nan
    datax = data[:, 0]
    datay = data[:, 1]
    nans, tmp = nan_helper(datax)
    datax[nans] = np.interp(tmp(nans), tmp(~nans), datax[~nans])
    nans, tmp = nan_helper(datay)
    datay[nans] = np.interp(tmp(nans), tmp(~nans), datay[~nans])
    data_out = np.column_stack((datax, datay))
    return data_out
